algorithm 奥格瑞the睦
floyd 弗洛依德
Dijskra 蒂斯克拉
prim 最小生成树 稠密图
Kruskal 稀疏图 并查集 判断
字符串在循环中+时，一定记住在循环外new StringBuilder，学会使用StringBuilder
dp也是使用dfs bfs，但是记住如果超时的话可能时dp的中间状态没有保存，记得保存dp的中间状态
堆排序、快速排序、希尔排序、直接选择排序不是稳定的排序算法，而基数排序、冒泡排序、直接插入排序、折半插入排序、归并排序是稳定的排序算法
桶排序是一个大的概念，基数排序和计数排序是他的具体实现
E peek()
检索但不删除此队列的头，如果此队列为空，则返回 null 。
E poll()
检索并删除此队列的头，如果此队列为空，则返回 null 。
comparator比较器 o1-o2 结果为负数则o1在前面 正数则o2在前
netstat -antp |grep tomcat
在QQ已登录的情况下，同时按住键盘上的ctrl+alt+a键，此时就会出现截图框，用鼠标画出你想要截取的屏幕区域
ctrl+alt+shift+u
int mid = low + ((high - low )>> 1);


一、视图查看
Ctrl+F12 查看file，method结构图、类继承机构图
（不知道方法结构，Ctrl+F12一下，方法，参数，返回值，一清二楚的展现出来）
Ctrl+shift+Alt+U 查看maven依赖，类图
　　使用maven做项目时，依赖往往非常多，在配置依赖的文件中只需要Ctrl+shift+Alt+U，所有依赖都以拓扑图的方式展现出来，所有的关系和位置都能找到；
　　如下图（抱歉，项目依赖太多，具体的依赖需要放大）




类图：我们阅读源码的时候，想知道各个类之间的关系怎么办，Ctrl+shift+Alt+U，所有依赖都以拓扑图的方式展现出来，所有的关系和位置都能找到，以ArrayList为例：





Ctrl＋Alt+H 查看方法调用层次；
二、定位
1.项目之间的跳转
Ctrl+Alt+[　　跳转到下一个项目
Ctrl+Alt+]　　跳转到上一个项目
2.文件之间的跳转
Ctrl+E　　 定位到最近浏览过的文件 
Ctrl+Shift+E　　最近更改的文件
Shift+Click　　可以关闭文件
3.位置的跳转
Ctrl+Shift+Backspace　　 跳转上一次修改的地方
Ctrl+Alt+B　　跳转到方法实现处
Ctrl+Shift+左箭头　　上一个浏览的地方
Ctrl+Shift+右箭头　　下一个浏览的地方
4.其他的跳转
Ctrl+H　　显示类结构图（类的继承层次）
Ctrl+Q　　显示注释文档
Alt+1　　快速打开或隐藏工程面板
Alt+left/right　　切换代码视图
F2 或 Shift+F2　　高亮错误或警告快速定位
Tab　　代码标签输入完成后，按 Tab，生成代码
Ctrl+Shift+F7　　高亮显示所有该文本，按 Esc 高亮消失
5.搜索
Ctrl＋N　　快速搜索类
Ctrl＋Shift＋N　　快速搜索文件
Ctrl＋Alt+Shift＋N　　快速搜索函数
三个里面都有Include non-porjecct items选项,勾选则表示非当前文件中的jar里面所有的类也会被查找；




Ctrl+Shift+F　　快速搜索字符串


Alt+F1　　查找代码所在位置
Alt+F3　　逐个往下查找相同文本，并高亮显示
6.光标移动和选中
Ctrl＋Alt+Shift＋J 选中所有相应的目标
Alt+Up/Down　　在方法间快速移动定位
Ctrl+Shift+Up/Down　　向上/下移动语句
Ctrl+Up/Down　　光标中转到第一行或最后一行下
Ctrl+B/Ctrl+Click　　快速打开光标处的类或方法（跳转到定义处）
三、Alt+Enter
虽然只用一个组合按键，但是它的作用非常大
1.提供代码提示
代码报错只要alt+Enter一下，他就为我们提供了好了解决方案；
2.自动创建函数
只要写好函数名称，Alt+Enter一下，它就能帮我们自动创建好函数；
3.list replace
写完一个list用for遍历；Alt+Enter一下，他就告诉你还有更好的重构方法：

回车它就能帮你重构好；
4.实现接口
当我们需要实现接口的时候，只需要在接口的名称上Alt+Enter就能做到

5.单词拼写
程序员好多都英语不好，Alt+Enter简直是他们的福音；
当我们拿不准一个单词拼写对不对的时候不放，Alt+Enter一下。

回车以后它能把相似的单词都列出来，
我们只需要找到对的那个就ok，是不是很好用。

6.导包
当你需要使用某个包时，只需要把光标移动到想导包的名称上，Alt+Enter导入完成；
四、live Templates（模板）
这是定义了大量的模板，只用敲出小小的几个字母提示，就可以回车使用模板生成大量的代码；
大家也可以在这里把常用的代码定义成模板，像main方法，for循环等等，方便快捷；
例如public static final int可以定义成下图所示：
不会自定义的点击查看：创建模板的教程
五、postfix
大家在写代码的时候，写完代码会用点来提示我们，例如，100. 敲完回车会生成一个for循环，用到的就是postfix，这是一种比 live Templates还快的小助手，当然它也是不可编辑的，里面定义了大量常见的函数和模板，熟练使用能提高我们很多的编码效率；

回车以后结果如下
1 List<String> strings = new ArrayList(); 2 for (int i = 0; i < strings.size(); i++) { 3 4 }

六、重构

Shift+F6 重命名
所有的文件，类名，函数名，属性名都可以重命名，
值得点赞的是，只要你使用Shift+F6重命名，所有使用过这个名称的地方都会跟着改变；
函数的重构
Ctrl+F6 重构函数
当你需要重构方法时，无论是增加参数，修改返回值，还是更改函数实现，只需要Ctrl+F6，就可以把所有用到此函数的地方一起重构，界面如下
七、抽取
1.抽取变量
类似于图中这样，很多地方都用到了“aaaaaa”这个字符串，很明显我们把“aaaaaa”抽取出来会更好；
对着它Ctrl+Alt+v
我们按照自己的需求，选择抽取一个还是抽取所有；
Ctrl+Alt+C 抽取静态变量 
Ctrl+Alt+F 抽取成员变量 
使用方法和抽取变量类似
Ctrl+Alt+P　　抽取方法参数
Ctrl+Alt+M　　抽取方法　　
当一个方法长度过长的时候，只需要把代码分离成多个模块，选中各个模块只要Ctrl+Alt+M就能抽取为一个新的方法，我们只需要引用就好；